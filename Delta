import requests
import socket
import logging
from requests.adapters import HTTPAdapter
from urllib3.poolmanager import PoolManager

# Custom Adapter for TCP Keep-Alive
class TCPKeepAliveAdapter(HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        socket_options = HTTPAdapter.default_socket_options + [
            (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
            (socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, 60),   # Time before first keepalive probe
            (socket.IPPROTO_TCP, socket.TCP_KEEPINTVL, 10),  # Interval between probes
            (socket.IPPROTO_TCP, socket.TCP_KEEPCNT, 5),     # Max failed probes
        ]
        kwargs['socket_options'] = socket_options
        super().init_poolmanager(*args, **kwargs)

# Function to be used in Airflow PythonOperator
def send_data_to_api(**kwargs):
    supplement_data_url_with_parameters = kwargs['url']
    headers = kwargs.get('headers', {})
    supplement_data = kwargs.get('payload', {})

    session = requests.Session()
    session.mount("http://", TCPKeepAliveAdapter())
    session.mount("https://", TCPKeepAliveAdapter())
    session.headers.update(headers)

    logging.info("Sending data to API...")

    try:
        response = session.post(
            supplement_data_url_with_parameters,
            data=supplement_data,
            timeout=(10, 600),  # 10s connect timeout, 600s read timeout
            verify=False
        )

        if response.status_code == 200:
            logging.info("✅ Data sent successfully! Status code: 200")
            logging.info(f"Response data: {response.text}")
            return response.text
        else:
            logging.error(f"❌ Failed with status code: {response.status_code}")
            return None

    except Exception as e:
        logging.exception("❌ Exception while sending data")
        raise e
